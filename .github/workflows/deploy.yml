name: Deploy Django Docker App to Elastic Beanstalk

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
      EB_DEV_ENV_NAME: ${{ vars.EB_DEV_ENV_NAME }}
      EB_PREPROD_ENV_NAME: ${{ vars.EB_PREPROD_ENV_NAME }}
      EB_PROD_ENV_NAME: ${{ vars.EB_PROD_ENV_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install EB CLI
        run: |
          pip install --upgrade pip
          pip install awsebcli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment based on branch
        id: env
        run: |
          if [ "${{ github.event.workflow_run.head_branch }}" == "dev" ]; then
            echo "EB_ENV_NAME=${{ env.EB_DEV_ENV_NAME }}" >> $GITHUB_ENV
          elif [ "${{ github.event.workflow_run.head_branch }}" == "preprod" ]; then
            echo "EB_ENV_NAME=${{ env.EB_PREPROD_ENV_NAME }}" >> $GITHUB_ENV
          elif [ "${{ github.event.workflow_run.head_branch }}" == "main" ]; then
            echo "EB_ENV_NAME=${{ env.EB_PREPROD_ENV_NAME }}" >> $GITHUB_ENV
          else
            echo "Unknown branch; skipping deployment"
            exit 1
          fi

      - name: Initialize EB CLI
        run: |
          eb init $EB_APP_NAME --region $AWS_REGION --platform docker

      - name: Deploy to Elastic Beanstalk
        run: |
          eb use $EB_ENV_NAME
          echo "Deploying to environment: $EB_ENV_NAME"
          eb deploy --staged
