volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

  production_redis_data: {}



services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile

    image: financeapp_production_django
    # depends_on:
      # - postgres
      # - redis
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DJANGO_AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      DJANGO_AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DJANGO_AWS_STORAGE_BUCKET_NAME: ${AWS_BUCKET_NAME}

    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    # ports:
      # - "5000:5000"

  # postgres:
  #   build:
  #     context: .
  #     dockerfile: ./compose/production/postgres/Dockerfile
  #   image: financeapp_production_postgres
  #   volumes:
  #     - production_postgres_data:/var/lib/postgresql/data
  #     - production_postgres_data_backups:/backups
  #   env_file:
  #     - ./.envs/.production/.postgres

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: financeapp_production_traefik
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
      - '0.0.0.0:5555:5555'

  # redis:
  #   image: docker.io/redis:6

  #   volumes:
  #     - production_redis_data:/data


  # celeryworker:
  #   <<: *django
  #   image: financeapp_production_celeryworker
  #   command: /start-celeryworker

  # celerybeat:
  #   <<: *django
  #   image: financeapp_production_celerybeat
  #   command: /start-celerybeat

  # flower:
  #   <<: *django
  #   image: financeapp_production_flower
  #   command: /start-flower

  # awscli:
  #   build:
  #     context: .
  #     dockerfile: ./compose/production/aws/Dockerfile
  #   env_file:
  #     - ./.envs/.production/.django
  #   volumes:
  #     - production_postgres_data_backups:/backups:z
